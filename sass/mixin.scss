@mixin prefixed($property, $value) {
    -webkit-#{$property}: #{$value};
    -moz-#{$property}: #{$value};
    -ms-#{$property}: #{$value};
    -o-#{$property}: #{$value};
    #{$property}: #{$value};
}
@mixin prefixed2($property, $value) {
    #{$property}: -webkit-#{$value};
    #{$property}: -moz-#{$value};
    #{$property}: -ms-#{$value};
    #{$property}: -o-#{$value};
    #{$property}: #{$value};
}
/* flex aperations */
@mixin display-flex(){
  @include prefixed(display,flex);
}
@mixin flex-direction($fd){
  @include prefixed(flex-direction, $fd);
  /*  flex-direction: row | row-reverse | column | column-reverse; */
}
@mixin flex-wrap($fw){
  @include prefixed(flex-wrap, $fw);
  /* flex-wrap:nowrap | wrap | wrap-reverse;  */
}
@mixin justify-content($jc){
  @include prefixed(justify-content, $jc);
  /* justify-content: flex-start | flex-end  |  center |  space-around | space-between;  */
}
@mixin align-items($ai){
  @include prefixed(align-items ,$ai);
  /* align-items: stretch | baseline  |  center  |  flex-start  | flex-end ; */
}
@mixin align-content($ac){
  @include prefixed(align-content, $ac);
  /* align-content: stretch| center  | flex-start  | flex-end | space-around  | space-between; */
}
@mixin align-self($as: auto){
  @include prefixed(align-self, $as);
  /* align-content: stretch| center  | flex-start  | flex-end | space-around  | space-between; */
}
@mixin flex($f){
  @include prefixed(flex, $f);
}
@mixin text-shadow($string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
	text-shadow: $string;
}
@mixin box-shadow($string) {
  @include prefixed(box-shadow, $string);
}
@mixin drop-shadow($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {
  @include prefixed(box-shadow, $x $y $blur $spread rgba(0, 0, 0, $alpha));
}
@mixin inner-shadow($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {
  @include prefixed(box-shadow, inset $x $y $blur $spread rgba(0, 0, 0, $alpha));
}
@mixin box-sizing($type: border-box) {
  @include prefixed(box-sizing, $type);
}
@mixin border($br){
  @include prefixed(border, $br);
}
@mixin border-radius($radius: 4px) {
  @include prefixed(border-radius, $radius);
	-moz-background-clip:    padding;
	-webkit-background-clip: padding-box;
	background-clip:         padding-box;
}
@mixin border-color($br-color) {
  @include prefixed(border-color, $br-color);
}
@mixin border-radiuses($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
	-webkit-border-top-right-radius:    $topright;
	-webkit-border-bottom-right-radius: $bottomright;
	-webkit-border-bottom-left-radius:  $bottomleft;
	-webkit-border-top-left-radius:     $topleft;
	-moz-border-radius-topright:        $topright;
	-moz-border-radius-bottomright:     $bottomright;
	-moz-border-radius-bottomleft:      $bottomleft;
	-moz-border-radius-topleft:         $topleft;
	border-top-right-radius:            $topright;
	border-bottom-right-radius:         $bottomright;
	border-bottom-left-radius:          $bottomleft;
	border-top-left-radius:             $topleft;
	-moz-background-clip:    padding;
	-webkit-background-clip: padding-box;
	background-clip:         padding-box;
}
@mixin opacity($opacity: 0.5) {
  @include prefixed(opacity, $opacity);
}
@mixin gradient($startColor: #eee, $endColor: white) {
	background-color: $startColor;
	background: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
	background: -webkit-linear-gradient(top, $startColor, $endColor);
	background: -moz-linear-gradient(top, $startColor, $endColor);
	background: -ms-linear-gradient(top, $startColor, $endColor);
	background: -o-linear-gradient(top, $startColor, $endColor);
}
@mixin horizontal-gradient($startColor: #eee, $endColor: white) {
 	background-color: $startColor;
	background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
	background-image: -webkit-linear-gradient(left, $startColor, $endColor);
	background-image: -moz-linear-gradient(left, $startColor, $endColor);
	background-image: -ms-linear-gradient(left, $startColor, $endColor);
	background-image: -o-linear-gradient(left, $startColor, $endColor);
}
@mixin animation($name,$iteration-count: infinite) {
  @include prefixed(animation-name, $name);
  @include prefixed(animation-iteration-count, $iteration-count);
}
@mixin transition($transition) {
  @include prefixed(transition, $transition);
}
@mixin transform($string){
  @include prefixed(transform, $string);
}
@mixin scale($factor) {
  @include prefixed(transform, scale($factor));
}
@mixin rotate($deg) {
  @include prefixed(transform, rotate($deg));
}
@mixin skew($deg, $deg2) {
  @include prefixed(transform, skew($deg, $deg2));
}
@mixin translate($x, $y:0) {
  @include prefixed(transform, translate($x, $y));
}
@mixin translate3d($x, $y: 0, $z: 0) {
  @include prefixed(transform, translate3d($x, $y, $z));
}
@mixin perspective($value: 1000) {
  @include prefixed(perspective, $value);
}
@mixin transform-origin($x:center, $y:center) {
  @include prefixed(transform-origin, $x $y);
}
@mixin hvr-basic($name, $property, $value){
  [hvr~="#{$name}"]{
    &:hover,&:focus,&:active
    {#{$property}:$value;}
  }
}
/* border-radius border-color gibi özelliklerin her tarayıcı için ayrı ayrı çağrılmasından dolayı dogan bir fonksiyon */
@mixin hvr-prefixed($name,$property, $value){
  [hvr~="#{$name}"]{&:hover,&:focus,&:active
    {
      @include prefixed($property, $value);
    }
  }
}
/* bu mixin çok fazla animasyon yapmadan tek boyutlu istenileni gerçekleştirir*/
@mixin hvr-a-basic($name, $property, $value){
  [hvr-a="#{$name}"]{
    &:hover,&:focus,&:active{
      @include animation($name,1)
    }
  }
  @keyframes #{$name}{
    100%{
      #{$property}:$value;
    }
  }
}
@mixin hvr-a-prefixed($name, $property, $value){
  [hvr-a="#{$name}"]{&:hover,&:focus,&:active{
      @include animation($name,1)
    }
  }
  @keyframes #{$name}{
    100%{
      @include prefixed($property, $value);
    }
  }
}
@mixin general($name, $property, $value){
  [gnrl~="#{$name}"]{#{$property}:$value}
}
@mixin general-prefixed($name, $property, $value){
  [gnrl~="#{$name}"]{
    @include prefixed($property, $value);
  }
}
@mixin general-prefixed2($name, $property, $value){
  [gnrl~="#{$name}"]{
    @include prefixed2($property, $value);
  }
}
